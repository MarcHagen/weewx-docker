---
name: build

on:
  push:
  pull_request:
  repository_dispatch:
    types: [apb]

env:
  IMAGE_NAME: felddy/weewx
  PIP_CACHE_DIR: ~/.cache/pip
  PRE_COMMIT_CACHE_DIR: ~/.cache/pre-commit

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Store installed Python version
        run: |
          echo "PY_VERSION="\
          "$(python -c "import platform;print(platform.python_version())")" \
          >> $GITHUB_ENV
      - name: Cache linting environments
        uses: actions/cache@v2.1.4
        with:
          path: |
            ${{ env.PIP_CACHE_DIR }}
            ${{ env.PRE_COMMIT_CACHE_DIR }}
          key: "lint-${{ runner.os }}-py${{ env.PY_VERSION }}-\
            ${{ hashFiles('**/requirements-test.txt') }}-\
            ${{ hashFiles('**/requirements.txt') }}-\
            ${{ hashFiles('**/.pre-commit-config.yaml') }}"
          restore-keys: |
            lint-${{ runner.os }}-py${{ env.PY_VERSION }}-
            lint-${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade --requirement requirements-test.txt
      - name: Set up pre-commit hook environments
        run: pre-commit install-hooks
      - name: Run pre-commit on all files
        run: pre-commit run --all-files
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Determine image version
        id: get_ver
        run: |
          echo "##[set-output name=version;]$(./bump_version.sh show)"
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      - name: Create cross-platform support Dockerfile-x
        run: ./buildx-dockerfile.sh
      - name: Build docker image
        run: |
          mkdir -p dist
          IFS='.' read -r -a version_array \
            <<< "${{ steps.get_ver.outputs.version }}"
          docker buildx build \
            --file Dockerfile-x \
            --platform linux/amd64 \
            --output "type=docker,dest=dist/image.tar" \
            --tag "$IMAGE_NAME:latest" \
            --tag "${IMAGE_NAME}:${{ steps.get_ver.outputs.version }}" \
            --tag "${IMAGE_NAME}:${version_array[0]}.${version_array[1]}" \
            --tag "${IMAGE_NAME}:${version_array[0]}" \
            --build-arg GIT_COMMIT=$(git log -1 --format=%H) \
            --build-arg GIT_REMOTE=$(git remote get-url origin) \
            --build-arg VERSION=${{ steps.get_ver.outputs.version }} \
            .
      - name: Compressing image
        run: gzip dist/image.tar
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist
  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache testing environments
        uses: actions/cache@v2.1.4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: "test-${{ runner.os }}-\
            ${{ hashFiles('**/requirements-test.txt') }}-\
            ${{ hashFiles('**/requirements.txt') }}"
          restore-keys: |
            test-${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade --requirement requirements-test.txt
      - name: Download docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Load docker image
        run: docker load < dist/image.tar.gz
      - name: Prepare data volume mount
        run: |
          chmod a+rwx data
      - name: Generate test configuration
        run: docker-compose run weewx --gen-test-config
      - name: Run tests
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: pytest
      - name: Upload data artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v1
        with:
          name: data
          path: data
